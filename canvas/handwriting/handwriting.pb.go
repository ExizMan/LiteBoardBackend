// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.6
// source: handwriting.proto

package handwritingpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HandwritingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*DrawEvent           `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"` // Массив событий draw
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandwritingRequest) Reset() {
	*x = HandwritingRequest{}
	mi := &file_handwriting_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandwritingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandwritingRequest) ProtoMessage() {}

func (x *HandwritingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handwriting_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandwritingRequest.ProtoReflect.Descriptor instead.
func (*HandwritingRequest) Descriptor() ([]byte, []int) {
	return file_handwriting_proto_rawDescGZIP(), []int{0}
}

func (x *HandwritingRequest) GetEvents() []*DrawEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type DrawEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // "draw"
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BoardId       string                 `protobuf:"bytes,3,opt,name=board_id,json=boardId,proto3" json:"board_id,omitempty"`
	Payload       *DrawPayload           `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	Timestamp     int64                  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DrawEvent) Reset() {
	*x = DrawEvent{}
	mi := &file_handwriting_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawEvent) ProtoMessage() {}

func (x *DrawEvent) ProtoReflect() protoreflect.Message {
	mi := &file_handwriting_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawEvent.ProtoReflect.Descriptor instead.
func (*DrawEvent) Descriptor() ([]byte, []int) {
	return file_handwriting_proto_rawDescGZIP(), []int{1}
}

func (x *DrawEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DrawEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DrawEvent) GetBoardId() string {
	if x != nil {
		return x.BoardId
	}
	return ""
}

func (x *DrawEvent) GetPayload() *DrawPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DrawEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type DrawPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Points        []*Point               `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	Color         string                 `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	Thickness     int32                  `protobuf:"varint,3,opt,name=thickness,proto3" json:"thickness,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DrawPayload) Reset() {
	*x = DrawPayload{}
	mi := &file_handwriting_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawPayload) ProtoMessage() {}

func (x *DrawPayload) ProtoReflect() protoreflect.Message {
	mi := &file_handwriting_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawPayload.ProtoReflect.Descriptor instead.
func (*DrawPayload) Descriptor() ([]byte, []int) {
	return file_handwriting_proto_rawDescGZIP(), []int{2}
}

func (x *DrawPayload) GetPoints() []*Point {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *DrawPayload) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *DrawPayload) GetThickness() int32 {
	if x != nil {
		return x.Thickness
	}
	return 0
}

type Point struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float64                `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             float64                `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Point) Reset() {
	*x = Point{}
	mi := &file_handwriting_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_handwriting_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_handwriting_proto_rawDescGZIP(), []int{3}
}

func (x *Point) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Point) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type HandwritingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*DrawEvent           `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"` // Сглаженные события
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandwritingResponse) Reset() {
	*x = HandwritingResponse{}
	mi := &file_handwriting_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandwritingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandwritingResponse) ProtoMessage() {}

func (x *HandwritingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handwriting_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandwritingResponse.ProtoReflect.Descriptor instead.
func (*HandwritingResponse) Descriptor() ([]byte, []int) {
	return file_handwriting_proto_rawDescGZIP(), []int{4}
}

func (x *HandwritingResponse) GetEvents() []*DrawEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

var File_handwriting_proto protoreflect.FileDescriptor

const file_handwriting_proto_rawDesc = "" +
	"\n" +
	"\x11handwriting.proto\x12\vhandwriting\"D\n" +
	"\x12HandwritingRequest\x12.\n" +
	"\x06events\x18\x01 \x03(\v2\x16.handwriting.DrawEventR\x06events\"\xa5\x01\n" +
	"\tDrawEvent\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x19\n" +
	"\bboard_id\x18\x03 \x01(\tR\aboardId\x122\n" +
	"\apayload\x18\x04 \x01(\v2\x18.handwriting.DrawPayloadR\apayload\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x03R\ttimestamp\"m\n" +
	"\vDrawPayload\x12*\n" +
	"\x06points\x18\x01 \x03(\v2\x12.handwriting.PointR\x06points\x12\x14\n" +
	"\x05color\x18\x02 \x01(\tR\x05color\x12\x1c\n" +
	"\tthickness\x18\x03 \x01(\x05R\tthickness\"#\n" +
	"\x05Point\x12\f\n" +
	"\x01x\x18\x01 \x01(\x01R\x01x\x12\f\n" +
	"\x01y\x18\x02 \x01(\x01R\x01y\"E\n" +
	"\x13HandwritingResponse\x12.\n" +
	"\x06events\x18\x01 \x03(\v2\x16.handwriting.DrawEventR\x06events2i\n" +
	"\x15HandwritingRecognizer\x12P\n" +
	"\tRecognize\x12\x1f.handwriting.HandwritingRequest\x1a .handwriting.HandwritingResponse\"\x00B\x1dZ\x1b./handwriting;handwritingpbb\x06proto3"

var (
	file_handwriting_proto_rawDescOnce sync.Once
	file_handwriting_proto_rawDescData []byte
)

func file_handwriting_proto_rawDescGZIP() []byte {
	file_handwriting_proto_rawDescOnce.Do(func() {
		file_handwriting_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_handwriting_proto_rawDesc), len(file_handwriting_proto_rawDesc)))
	})
	return file_handwriting_proto_rawDescData
}

var file_handwriting_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_handwriting_proto_goTypes = []any{
	(*HandwritingRequest)(nil),  // 0: handwriting.HandwritingRequest
	(*DrawEvent)(nil),           // 1: handwriting.DrawEvent
	(*DrawPayload)(nil),         // 2: handwriting.DrawPayload
	(*Point)(nil),               // 3: handwriting.Point
	(*HandwritingResponse)(nil), // 4: handwriting.HandwritingResponse
}
var file_handwriting_proto_depIdxs = []int32{
	1, // 0: handwriting.HandwritingRequest.events:type_name -> handwriting.DrawEvent
	2, // 1: handwriting.DrawEvent.payload:type_name -> handwriting.DrawPayload
	3, // 2: handwriting.DrawPayload.points:type_name -> handwriting.Point
	1, // 3: handwriting.HandwritingResponse.events:type_name -> handwriting.DrawEvent
	0, // 4: handwriting.HandwritingRecognizer.Recognize:input_type -> handwriting.HandwritingRequest
	4, // 5: handwriting.HandwritingRecognizer.Recognize:output_type -> handwriting.HandwritingResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_handwriting_proto_init() }
func file_handwriting_proto_init() {
	if File_handwriting_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_handwriting_proto_rawDesc), len(file_handwriting_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_handwriting_proto_goTypes,
		DependencyIndexes: file_handwriting_proto_depIdxs,
		MessageInfos:      file_handwriting_proto_msgTypes,
	}.Build()
	File_handwriting_proto = out.File
	file_handwriting_proto_goTypes = nil
	file_handwriting_proto_depIdxs = nil
}
